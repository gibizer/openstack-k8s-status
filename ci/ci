#!/bin/bash

set -euo pipefail
shopt -s globstar

USE_COLOR=${USE_COLOR:-true}
HIDE_OK=${HIDE_OK:-false}

K8S_RESOURCE_DIR="k8s"


echo_ok() {
    if $HIDE_OK ; then
        return 0
    fi

    if ! $USE_COLOR ; then
        echo "$*"
    else
        green=$(tput setaf 2)
        clear=$(tput sgr0)

        echo "$green$*$clear"
    fi
}

echo_nok() {
    if ! $USE_COLOR ; then
        echo "$*"
    else
        red=$(tput setaf 1)
        clear=$(tput sgr0)

        echo "$red$*$clear"
    fi
}

download_logs() {
    log_base="$1"

    rel_sos_path="ci-framework-data/logs/openstack-k8s-operators-openstack-must-gather/sos-reports/_all_nodes/"
    rel_tempest_log_path="ci-framework-data/tests/test_operator/tempest-tests/tempest.log"

    wget \
        -q --show-progress -e robots=off -A '*.tar.xz' \
        --no-parent --recursive --level=1 --no-directories \
        "$log_base$rel_sos_path"

    shopt -s nullglob

    for f in *compute-*.tar.xz ; do
        tar -ixf "$f" --exclude="dev"
        rm "$f"
    done

    for f in *ceph-*.tar.xz ; do
        tar ixf "$f" --exclude="dev"
        rm "$f"
    done

    for f in *networker-*.tar.xz ; do
        tar ixf "$f" --exclude="dev"
        rm "$f"
    done

    mkdir rotated-podlogs
    for f in *.tar.xz ; do
        dir=${f%"-UntarWithArg-i.tar.xz"}
        mkdir "$dir"
        tar ixf "$f" -C "$dir" --exclude="dev" || true
        rm "$f"
        poddir=${dir#"sosreport-"}
        mkdir "rotated-podlogs/$poddir"
        mv "$dir/podlogs/var/log/pods" "rotated-podlogs/$poddir/" || true
    done

    shopt -u nullglob

    wget -q --show-progress "$log_base$rel_tempest_log_path" || true

}

download_k8s_resources() {
    log_base="$1"

    rel_namespaces_path="ci-framework-data/logs/openstack-k8s-operators-openstack-must-gather/namespaces/"
    namespaces=(
        "openstack"
        "openstack-operators"
        "cert-manager"
        "openshift-machine-api"
        "openshift-nmstate"
    )

    printf "%s\n"  "${namespaces[@]}" |
        xargs -P "${#namespaces[@]}" -I {} \
            wget \
                -q --show-progress -e robots=off \
                --no-parent --recursive -R '*index.html*' \
                -P "$K8S_RESOURCE_DIR" \
                "$log_base$rel_namespaces_path"{}/

    # remove the unnecessary directory tree nesting from wget
    mv k8s/**/*-must-gather k8s/

    shopt -s nullglob

    for tempest in k8s/**/logs/tempest-tests-tests-runner.log ; do
        [[ "$tempest" =~ ^.*/(tempest-tests.*)-.*/.*$ ]]
        ln -s "$tempest" "${BASH_REMATCH[1]}-pod.log"
    done

    shopt -u nullglob

}

download_all() {
    log_base=$1
    download_logs "$log_base"
    download_k8s_resources "$log_base"
}

_get_k8s_resources() {
    namespace=$1
    kind=$2  # e.g. statefulset, configmap, secret, cr/openstackcontrolplane

    # we want globbing to happen
    # shellcheck disable=SC2086
    find \
        ./"$K8S_RESOURCE_DIR"/**/namespaces/$namespace/$kind* \
        -name "*.yaml"
}

_assert_crs_of_a_kind_ready() {
    kind=$(echo "$1" | tr '[:upper:]' '[:lower:]')

    crs=$(_get_k8s_resources openstack "crs/$kind")
    if [[ -z $crs ]]; then
        echo "No $kind CRs found"
        return 1
    fi

    rc=0
    for cr in $crs ; do
        name=$(yq < "$cr" '.metadata.name' -o yaml)
        kind=$(yq < "$cr" '.kind' -o yaml)
        ready_cond=$(
            yq -o yaml < "$cr" \
            '.status.conditions | map(select( .type == "Ready" and .status != "True"))'
        )

        if [[ $ready_cond != "[]" ]]; then
            echo_nok "$kind/$name is not Ready:"
            echo -e "$ready_cond"
            rc=$((rc+1))
        else
            echo_ok "$kind/$name is Ready"
        fi
    done
    return $rc
}

_check_ctlplane() {
    crs=(
        barbican cinder glance heat horizon ironic keystone galera memcached
        neutron nova ovn placementapi rabbitmq swift
    )
    if ! _assert_crs_of_a_kind_ready openstackcontrolplane ; then
        for cr in "${crs[@]}" ; do
            _assert_crs_of_a_kind_ready "$cr" || true
        done
        return 1
    fi
}

_check_dataplane() {
    if ! _assert_crs_of_a_kind_ready openstackdataplanedeployment ; then
        # get the failed service and prin the failure form the log
        error=$(_assert_crs_of_a_kind_ready openstackdataplanedeployment | grep "execution.name") || true
        [[ "$error" =~ ^.*execution.name[[:space:]]+(.+)[[:space:]]+execution.namespace.*$ ]]
        service="${BASH_REMATCH[1]}"
        grep "FAILED!" $K8S_RESOURCE_DIR/**/pods/"$service"*/logs/*.log | head -n2

        return 1
    fi
    _assert_crs_of_a_kind_ready openstackdataplanenodeset
}

# shellcheck disable=SC2086
_check_tempest() {
    tempest_logs="tempest-*-pod.log"

    if ! grep "tempest run" $tempest_logs > /dev/null; then
        echo_nok "Tempest setup failed:"
        grep "RETURN_VALUE=" $tempest_logs -B 20
        return 1
    fi

    if ! grep "Failed: 0" $tempest_logs > /dev/null; then
        echo_nok "Tempest failed:"
        grep "... FAILED" $tempest_logs
        grep "Totals" -B 1 -A 7 $tempest_logs

        return 2
    fi

    echo "Tempest passed"
    grep "Totals" -B 1 -A 7 $tempest_logs
}

analyze() {

    _check_ctlplane
    _check_dataplane
    _check_tempest

    echo_ok "All checks passed"
}


print_commands() {
    echo "available commands:"
    declare -F | cut -d ' ' -f 3 | sed -e 's/^/\t/'
}


if [[ $# -lt 1 ]]; then
    print_commands
    exit 1
fi

if declare -f "$1" > /dev/null ; then
    "$@"
else
    print_commands
    exit 1
fi
